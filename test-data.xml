<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="2" hostname="jdb-XPS-13-9360" name="pytest" skipped="15" tests="26" time="0.183" timestamp="2019-11-15T15:34:40.478479"><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="26" name="test_threadpool_limits_by_prefix[libiomp]" time="0.012"><skipped message="Requires libiomp runtime" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/test_threadpoolctl.py:32: Requires libiomp runtime</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="26" name="test_threadpool_limits_by_prefix[libgomp]" time="0.001"><skipped message="Requires libgomp runtime" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/test_threadpoolctl.py:32: Requires libgomp runtime</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="26" name="test_threadpool_limits_by_prefix[libomp]" time="0.002"></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="26" name="test_threadpool_limits_by_prefix[vcomp]" time="0.002"><skipped message="Requires vcomp runtime" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/test_threadpoolctl.py:32: Requires vcomp runtime</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="26" name="test_threadpool_limits_by_prefix[libopenblas]" time="0.001"><skipped message="Requires libopenblas runtime" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/test_threadpoolctl.py:32: Requires libopenblas runtime</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="26" name="test_threadpool_limits_by_prefix[libmkl_rt]" time="0.001"><skipped message="Requires libmkl_rt runtime" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/test_threadpoolctl.py:32: Requires libmkl_rt runtime</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="26" name="test_threadpool_limits_by_prefix[mkl_rt]" time="0.002"><skipped message="Requires mkl_rt runtime" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/test_threadpoolctl.py:32: Requires mkl_rt runtime</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="26" name="test_threadpool_limits_by_prefix[libblis]" time="0.002"><skipped message="Requires libblis runtime" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/test_threadpoolctl.py:32: Requires libblis runtime</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="52" name="test_set_threadpool_limits_by_api[None]" time="0.004"></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="52" name="test_set_threadpool_limits_by_api[blas]" time="0.002"></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="52" name="test_set_threadpool_limits_by_api[openmp]" time="0.002"></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="79" name="test_threadpool_limits_function_with_side_effect" time="0.001"></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="98" name="test_set_threadpool_limits_no_limit" time="0.001"></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="107" name="test_threadpool_limits_manual_unregister" time="0.001"></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="127" name="test_threadpool_limits_bad_input" time="0.001"></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="212" name="test_shipped_openblas" time="0.001"></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="225" name="test_multiple_shipped_openblas" time="0.000"><skipped message="need at least 2 shipped openblas library" type="pytest.skip">tests/test_threadpoolctl.py:225: need at least 2 shipped openblas library</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="234" name="test_nested_prange_blas[None]" time="0.000"><skipped message="requires scipy" type="pytest.skip">tests/test_threadpoolctl.py:234: requires scipy</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="234" name="test_nested_prange_blas[1]" time="0.000"><skipped message="requires scipy" type="pytest.skip">tests/test_threadpoolctl.py:234: requires scipy</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="234" name="test_nested_prange_blas[2]" time="0.000"><skipped message="requires scipy" type="pytest.skip">tests/test_threadpoolctl.py:234: requires scipy</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="234" name="test_nested_prange_blas[4]" time="0.000"><skipped message="requires scipy" type="pytest.skip">tests/test_threadpoolctl.py:234: requires scipy</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="275" name="test_get_original_num_threads[1]" time="0.002"><failure message="assert False">limit = 1

    @pytest.mark.parametrize(&quot;limit&quot;, [1, None])
    def test_get_original_num_threads(limit):
        with threadpool_limits(limits=2, user_api=&apos;blas&apos;) as ctl:
            # set different blas num threads to start with (when multiple openblas)
            if ctl._original_limits:
                ctl._original_limits[0][&apos;set_num_threads&apos;](1)
    
            original_infos = threadpool_info()
            with threadpool_limits(limits=limit, user_api=&apos;blas&apos;) as threadpoolctx:
                original_num_threads = threadpoolctx.get_original_num_threads()
    
                assert &apos;openmp&apos; not in original_num_threads
    
                if &apos;blas&apos; in [module[&apos;user_api&apos;] for module in original_infos]:
                    assert original_num_threads[&apos;blas&apos;] &gt;= 1
                else:
                    assert original_num_threads[&apos;blas&apos;] is None
    
                if len(libopenblas_paths) &gt;= 2:
                    with pytest.warns(None, match=&apos;Multiple value possible&apos;):
                        expected = min(
                            [module[&apos;num_threads&apos;] for module in original_infos])
                        assert original_num_threads[&apos;blas&apos;] == expected
&gt;       assert False
E       assert False

ctl        = &lt;threadpoolctl.threadpool_limits object at 0x7f6669e3ac50&gt;
limit      = 1
original_infos = [{&apos;filepath&apos;: &apos;/usr/lib/llvm-8/lib/libomp.so.5&apos;, &apos;internal_api&apos;: &apos;openmp&apos;, &apos;num_threads&apos;: 4, &apos;prefix&apos;: &apos;libomp&apos;, ...}]
original_num_threads = {&apos;blas&apos;: None}
threadpoolctx = &lt;threadpoolctl.threadpool_limits object at 0x7f6669d8c850&gt;

tests/test_threadpoolctl.py:299: AssertionError</failure></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="275" name="test_get_original_num_threads[None]" time="0.001"><failure message="assert False">limit = None

    @pytest.mark.parametrize(&quot;limit&quot;, [1, None])
    def test_get_original_num_threads(limit):
        with threadpool_limits(limits=2, user_api=&apos;blas&apos;) as ctl:
            # set different blas num threads to start with (when multiple openblas)
            if ctl._original_limits:
                ctl._original_limits[0][&apos;set_num_threads&apos;](1)
    
            original_infos = threadpool_info()
            with threadpool_limits(limits=limit, user_api=&apos;blas&apos;) as threadpoolctx:
                original_num_threads = threadpoolctx.get_original_num_threads()
    
                assert &apos;openmp&apos; not in original_num_threads
    
                if &apos;blas&apos; in [module[&apos;user_api&apos;] for module in original_infos]:
                    assert original_num_threads[&apos;blas&apos;] &gt;= 1
                else:
                    assert original_num_threads[&apos;blas&apos;] is None
    
                if len(libopenblas_paths) &gt;= 2:
                    with pytest.warns(None, match=&apos;Multiple value possible&apos;):
                        expected = min(
                            [module[&apos;num_threads&apos;] for module in original_infos])
                        assert original_num_threads[&apos;blas&apos;] == expected
&gt;       assert False
E       assert False

ctl        = &lt;threadpoolctl.threadpool_limits object at 0x7f6669e75810&gt;
limit      = None
original_infos = [{&apos;filepath&apos;: &apos;/usr/lib/llvm-8/lib/libomp.so.5&apos;, &apos;internal_api&apos;: &apos;openmp&apos;, &apos;num_threads&apos;: 4, &apos;prefix&apos;: &apos;libomp&apos;, ...}]
original_num_threads = {&apos;blas&apos;: None}
threadpoolctx = &lt;threadpoolctl.threadpool_limits object at 0x7f6669e75910&gt;

tests/test_threadpoolctl.py:299: AssertionError</failure></testcase><testcase classname="tests.test_threadpoolctl" file="tests/test_threadpoolctl.py" line="301" name="test_mkl_threading_layer" time="0.001"><skipped message="requires MKL" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/test_threadpoolctl.py:309: requires MKL</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/utils.py" line="6" name="test_openmp_limit_num_threads" time="0.001"><skipped message="Test requires check_openmp_n_threads to be compiled" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/utils.py:8: Test requires check_openmp_n_threads to be compiled</skipped></testcase><testcase classname="tests.test_threadpoolctl" file="tests/utils.py" line="6" name="test_openmp_nesting" time="0.001"><skipped message="Test requires check_openmp_n_threads to be compiled" type="pytest.skip">/home/jeremie/R/O/threadpoolctl/tests/utils.py:8: Test requires check_openmp_n_threads to be compiled</skipped></testcase></testsuite></testsuites>